---  
layout: post  
title: Algorithm || 그리디 Greedy
image: 01.greedy_1.png 
tags:  
categories: algorithm
---


# 그리디 Greedy

-참고 교재: 이것이 코딩테스트다 

- `그리디` 알고리즘은 **현재 상황**에서 지금 **당장 좋은 것**만 고르는 방법을 의미한다. 
- 일반적인 `그리디` 알고리즘은 문제를 풀기 위한 **최소한의 아이디어**를 떠올릴 수 있는 능력을 요구한다. 
- `그리디`의 해법은 그 **정당성 분석**이 중요하다. (단순히 가장 좋아보이는 것을 반복적으로 선택해도 최적의 해를 구할 수 있는지 검토한다.)

**루트 노드부터 시작하여 거쳐 가는 노드 값의 합을 최대로 만드는 문제**  
![image.png]({{site.baseurl}}/images/01.greedy_1.png)

위의 문제에서 매 순간마다 가장 큰 값을 고른다면 `5 + 10 + 4 = 19`의 값이 나오게 되는데, 정답은 `5 + 7 + 9 = 21`이다. 이와 같이 그리디 알고리즘은 **최적의 해를 보장할 수 없을 때**가 많다. 하지만 코딩 테스트에서 대부분 그리디 문제는 그리디로 얻은 해가 최적의 해가 되는 상황에서, 이를 추론할 수 있어야 풀리도록 출제된다. 이 말은 문제를 보고 **매 순간의 선택이 최적의 해가 될 것이라 추론할 수 있어야** 그리디 알고리즘을 사용할 수 있다는 뜻이다. 

<br>

**그리디 알고리즘의 조건**  
- 탐욕스런 선택조건 (Greedy choice property)  
: 현재 순간의 최적을 한번 선택하면, 이를 번복하지 않는다. 

- 최적 부분 구조 조건 (Optimal substructure)  
: 전체 문제의 최적해가 각 부분 문제들의 최적해로 이루어진다.  

<br>

## 문제 1. 거스름 돈 
>당신은 음식점의 계산을 도와주는 점원입니다. 카운터에는 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정합니다. 손님에게 거슬러 주어야 할 돈이 N원일 때 거슬러 주어야 할 동전의 최소 개수를 구하세요. 단, 거슬러 줘야 할 돈 N은 항상 10의 배수입니다.


```python
N = int(input())
count = 0 

lst_coin = [500, 100, 50, 10]

for coin in lst_coin:
    count += N // coin # (몫) = (사용한 동전의 개수) 
    N %= coin # 나머지 업데이트  

print(count)
```

     1260
    

    6
    

**아이디어/풀이**   
- 동전의 최소 개수를 구하기 위해서는 큰 화폐 단위부터 거슬러주는 것이 바람직하다. 

**그리디를 사용가능한 이유(정당성 분석)**  
- 동전의 종류 중 큰 단위가 항상 작은 단위의 배수이기 때문 (=작은 단위의 동전들을 조합하면 무조건 큰 단위의 동전이 나오게 됨) 
- 예를 들어 N=800일 때, lst_coin=[500, 400, 100]이라면 번복할 일이 생긴다. 

**시간 복잡도**  
- 화폐의 종류: K -> 시간복잡도: O(K)
- 거슬러줘야 하는 금액과는 무관, 동전의 총 종류에만 영향을 받음 

## 문제 2. 1이 될 때까지
>어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 합니다. 단, 두 번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있습니다.  
1\) N에서 1을 뺍니다.  
2\) N을 K로 나눕니다.   
N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하세요.
<br>
<br>
예를 들어 N이 17, K가 4라고 가정합시다. 이때 1번의 과정을 한 번 수행하면 N은 16이 됩니다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 됩니다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 됩니다. 이는 N을 1로 만드는 최소 횟수입니다.


```python
N, K = map(int, input().split())
cnt = 0 

while N > 1: 
    if N % K == 0:
        N //= K
    else:
        N -= 1 
    cnt += 1 
    
print(cnt)
```

     25 5
    

    2
    

**아이디어/풀이**    
- N 값을 줄일 때 2이상의 수로 나누는 작업이 1로 빼는 작업보다 수를 훨씬 많이 줄일 수 있다. 따라서 최대한 많이 나누기를 수행하도록 한다. 

**정당성 분석**  
- 두 과정 중 한가지는 무조건 수행해야 하므로 번복할 일이 없다. 
- N은 항상 1에 도달하게 된다.

## 문제 3. 곱하기 혹은 더하기 
>각 자리가 숫자(0부터 9)로만 이루어진 문자열 S가 주어졌을 때, 왼쪽부터 오른쪽으로 하나씩 모든 숫자를 확인하며 숫자 사이에 ‘×’ 혹은 ‘+’ 연산자를 넣어 결과적으로 만들어질 수 있는 가장 큰 수를 구하는 프로그램을 작성하세요. 단, +보다 ×를 먼저 계산하는 일반적인 방식과는 달리, 모든 연산은 왼쪽에서부터 순서대로 이루어진다고 가정합니다.
<br>
<br>
예를 들어 02984라는 문자열로 만들 수 있는 가장 큰 수는 ((((0 + 2) × 9) × 8) × 4) = 576입니다. 또한 만들어질 수 있는 가장 큰 수는 항상 20억 이하의 정수가 되도록 입력이 주어집니다.



```python
S = input()
result = int(S[0])

for num in S[1:]:
    num = int(num)
    if (result <= 1) or (num <= 1): 
        result += num
    else: 
        result *= num
        
print(result)
```

     02984
    

    576
    

**아이디어/풀이**    
- 대부분의 경우 +보다 *가 값을 더 크게 만들지만, 두 수 중 하나라도 0, 1 인 경우에 곱하기 보다 더하기를 수행하는 것이 효율적이다. 

**정당성 분석**  
- 두 가지의 연산을 사용해야 하는 상황이 명확하므로 번복할 일이 없다. 

## 문제 4. 모험가 길드 
>한 마을에 모험가가 N명 있습니다. 모험가 길드에서는 N명의 모험가를 대상으로 ‘공포도’를 측정했는데, ‘공포도’가 높은 모험가는 쉽게 공포를 느껴 위험 상황에서 제대로 대처할 능력이 떨어집니다.
모험가 길드장인 동빈이는 모험가 그룹을 안전하게 구성하고자 공포도가 X인 모험가는 반드시 X명 이상으로 구성한 모험가 그룹에 참여해야 여행을 떠날 수 있도록 규정했습니다.
동빈이는 최대 몇 개의 모험가 그룹을 만들 수 있는지 궁금합니다. N명의 모험가에 대한 정보가 주어졌을 때, 여행을 떠날 수 있는 그룹 수의 최댓값을 구하는 프로그램을 작성하세요.
<br>
<br>
예를 들어 N = 5이고, 각 모험가의 공포도가 다음과 같다고 가정합시다.  
`2 3 1 2 2`  
이 경우 그룹 1에 공포도가 1, 2, 3인 모험가를 한 명씩 넣고, 그룹 2에 공포도가 2인 남은 두 명을 넣게 되면 총 2개의 그룹을 만들 수 있습니다.
또한 몇 명의 모험가는 마을에 그대로 남아 있어도 되기 때문에, 모든 모험가를 특정한 그룹에 넣을 필요는 없습니다.



```python
# 공포도 <= 사람수 : 여행 가능 
# 최대 그룹 수 

N = int(input())
data = list(map(int, input().split()))

g = 0 # 그룹의 수 
h = 0 # 현재 사람의 수 (그룹 결성 후 리셋)

data.sort()

for f in data: 
    h += 1 
    if f <= h:
        g += 1 
        h = 0 
        
print(g)
```

     5
     2 3 1 2 2
    

    2
    

**아이디어/풀이**    
- 공포도를 오름차순 정렬하여 **현재 그룹에 포함된 모험가의 수**가 **현재 확인하고 있는 공포도**와 크거나 같다면 그룹으로 결성하고, 모험가의 수는 초기화 한다. 

**정당성 분석**  
- 매 상황마다 그룹을 결성할지 안 할지 최적의 선택을 한다. 
- 오름차순 정렬되어 있기 때문에, 항상 최소한의 모험가 수만 포함하여 그룹을 결성하므로 번복할 일이 없다.
